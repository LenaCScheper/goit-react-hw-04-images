{"version":3,"sources":["components/ImageGalleryItem/ImageGalleryItem.module.css","components/Modal/Modal.module.css","components/Container/Container.module.css","components/ImageGallery/ImageGallery.module.css","components/Button/Button.module.css","components/Loader/Loader.module.css","components/Searchbar/Searchbar.module.css","services/apiService.jsx","components/Container/Container.jsx","components/Searchbar/Searchbar.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/Loader/Loader.jsx","components/Modal/Modal.jsx","components/ErrorView/ErrorView.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","apiService","query","page","a","axios","get","data","hits","Container","children","className","s","container","Searchbar","onHandleSubmit","useState","setQuery","SearchForm","onSubmit","event","preventDefault","trim","toast","error","type","SearchForm__button","SearchForm__buttonLabel","SearchForm__input","autoComplete","autoFocus","value","onChange","target","placeholder","ImageGalleryItem","webformatURL","largeImageURL","tags","onOpenModal","src","alt","data-source","ImageGalleryItem__image","onClick","ImageGallery","images","map","id","Button","onLoadMore","Loader","color","height","width","timeout","modalRoot","document","querySelector","Modal","onToggleModal","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","Overlay","currentTarget","ErrorView","message","role","App","setImages","setlargeImageURL","setPage","setError","isLoading","setIsLoading","showModal","setShowModal","request","length","prevImages","fetchImages","toggleModal","scrollPage","setTimeout","scrollBy","innerHeight","newSearch","texterror","dataset","source","prevPage","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a957c75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__2-2S7\",\"ImageGalleryItem__image\":\"ImageGalleryItem_ImageGalleryItem__image__3cMpG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__kel8k\",\"Modal\":\"Modal_Modal__3AMOr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__YGOsb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__2Faln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1yuYf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__2_U4J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__QugyK\",\"SearchForm\":\"Searchbar_SearchForm__2Q6vO\",\"SearchForm__button\":\"Searchbar_SearchForm__button__1mebZ\",\"SearchForm__buttonLabel\":\"Searchbar_SearchForm__buttonLabel__PYq0t\",\"SearchForm__input\":\"Searchbar_SearchForm__input__2olFW\"};","import axios from 'axios';\n\nconst apiService = async (query, page) => {\n  const { data } = await axios.get(\n    `https://pixabay.com/api/?q=${query}&page=${page}&key=18996583-5f88ddbbd0a62c224fff1ccf9&image_type=photo&orientation=horizontal&per_page=12`,\n  );\n  return data.hits;\n};\n\nexport default apiService;","  \nimport PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './Searchbar.module.css';\n\nfunction Searchbar({ onHandleSubmit}) {\n\n  const [query, setQuery] = useState('');\n\n  const onSubmit = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      return toast.error('No-no! Dont joke with me! Enter something interesting!');\n    }\n    onHandleSubmit(query);\n    setQuery('');\n}\n\n\n\n\n  return (\n    <header className={s.Searchbar}>\n      <form className={s.SearchForm} onSubmit={onSubmit}>\n         <button type=\"submit\" className={s.SearchForm__button}>\n            <span className={s.SearchForm__buttonLabel}>Search</span>\n         </button>\n\n    <input\n      className={s.SearchForm__input}\n      type=\"text\"\n      autoComplete=\"off\"\n      autoFocus\n      value={query}\n     onChange={({ target }) => setQuery(target.value)}\n      placeholder=\"Search images and photos\"\n    />\n  </form>\n</header>\n  );\n}\n\nSearchbar.propTypes = {\n  onHandleSubmit: PropTypes.func.isRequired,\n };\n\nexport default Searchbar;"," \nimport PropTypes from 'prop-types';\nimport s from './ImageGalleryItem.module.css';\n\nexport default function ImageGalleryItem({ webformatURL, largeImageURL, tags, onOpenModal }) {\n  return (\n    <li className={s.ImageGalleryItem}>\n      <img\n        src={webformatURL}\n        alt={tags}\n        data-source={largeImageURL}\n        className={s.ImageGalleryItem__image}\n        onClick={onOpenModal}\n      />\n    </li>\n  );\n}\n\nImageGalleryItem.propTypes = {\n  largeImageURL: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n  webformatURL: PropTypes.string.isRequired,\n};\n\n","import PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport s from './ImageGallery.module.css';\n\nexport default function ImageGallery({ images, onOpenModal }) {\n  return (\n    <ul className={s.ImageGallery}>\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => (\n        <ImageGalleryItem\n          key={id}\n          webformatURL={webformatURL}\n          largeImageURL={largeImageURL}\n          tags={tags}\n          onOpenModal={onOpenModal}\n        />\n      ))}\n    </ul>\n  );\n}\n\nImageGallery.propTypes = {\n  images: PropTypes.array.isRequired,\n  onOpenModal: PropTypes.func.isRequired,\n};\n\n","\nimport PropTypes from 'prop-types';\nimport s from './Button.module.css';\n\nexport default function Button({ onLoadMore }) {\n  return (\n    <button type=\"button\" className={s.Button} onClick={onLoadMore}>\n      Load more\n    </button>\n  );\n}\n\nButton.propTypes = {\n  onLoadMore: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Spinner from 'react-loader-spinner';\nimport s from './Loader.module.css'\n\nfunction Loader() {\n  return (\n    <Spinner\n    className={s.Loader}\n      type=\"Grid\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n      timeout={3000}\n    />\n  );\n}\n\nexport default Loader;","import {  useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport s from './Modal.module.css';\n\nconst modalRoot = document.querySelector('#modalPortal');\n\nexport default function Modal({largeImageURL,onToggleModal}) {\n  \n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onToggleModal();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onToggleModal]);\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onToggleModal();\n    }\n  };\n  \n return createPortal(\n      <div className={s.Overlay} onClick={handleBackdropClick}>\n        <div className={s.Modal}>\n          <img src={largeImageURL} alt=\"\" />\n        </div>\n      </div>,\n      modalRoot,\n    );\n};\n\nModal.propTypes = {\n  onToggleModal: PropTypes.func.isRequired,\n};\n\n\n// class Modal extends Component {\n//   componentDidMount() {\n//     window.addEventListener('keydown', this.handleKeyDown);\n//   }\n\n//   componentWillUnmount() {\n//     window.removeEventListener('keydown', this.handleKeyDown);\n//   }\n\n  // handleKeyDown = e => {\n  //   if (e.code === 'Escape') {\n  //     this.props.onToggleModal();\n  //   }\n  // };\n\n  // handleBackdropClick = e => {\n  //   if (e.currentTarget === e.target) {\n  //     this.props.onToggleModal();\n  //   }\n  // };\n\n//   render() {\n//     const { largeImageURL } = this.props;\n\n//     return createPortal(\n//       <div className={s.Overlay} onClick={this.handleBackdropClick}>\n//         <div className={s.Modal}>\n//           <img src={largeImageURL} alt=\"\" />\n//         </div>\n//       </div>,\n//       modalRoot,\n//     );\n//   }\n// }\n\n// Modal.propTypes = {\n//   onToggleModal: PropTypes.func.isRequired,\n// };\n\n// export default Modal;","import PropTypes from 'prop-types';\n\nexport default function ErrorView({ message }) {\n  return (\n    <div role=\"alert\">\n      <p>Sorry, something went wrong. Error:{message}</p>\n    </div>\n  );\n}\n\nErrorView.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\n","  \nimport { useState, useEffect } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport apiService from './services';\nimport Container from './components/Container';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport Loader from './components/Loader';\nimport Modal from './components/Modal';\nimport ErrorView from './components/ErrorView';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [largeImageURL, setlargeImageURL] = useState('');\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n\n  useEffect(\n    () => {\n      if (!query) {\n        return\n      }\n      const fetchImages = async () => {\n        try {\n          const request = await apiService(query, page);\n\n          if (request.length === 0) {\n            return setError(`No results were found for ${query}!`)\n          };\n\n          setImages(prevImages => [...prevImages, ...request])\n        }\n\n        catch (error) {\n          setError('Something went wrong. Try again.');\n        }\n\n        finally {\n          setIsLoading(false);\n        };\n      };\n\n      fetchImages();\n    }, [query, page]);\n    \n  \n\n\n  const serchImages = newSearch => {\n    setQuery(newSearch);\n    setImages([]);\n    setPage(1);\n    setError(null);\n    setIsLoading(true);\n  };\n\n  const onLoadMore = () => {\n    setIsLoading(true);\n    setPage(prevPage => prevPage + 1);\n    scrollPage();\n  };\n\n  const onOpenModal = e => {\n    setlargeImageURL(e.target.dataset.source);\n    toggleModal();\n  };\n  \n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const scrollPage = () => {\n    setTimeout(() => {\n          window.scrollBy(0, window.innerHeight+150)\n    }, 1000);\n  };\n\n\n  return (\n    <>\n    <Container>\n        <Searchbar\n          onHandleSubmit={serchImages}\n         />\n\n        {error && <ErrorView texterror={error} />}\n\n        {images.length > 0 && (\n          <ImageGallery images={images} onOpenModal={onOpenModal} />\n        )}\n\n        {isLoading && <Loader />}\n\n        {!isLoading && images.length > 0 && (\n          <Button onLoadMore={onLoadMore} />\n        )}\n\n        {showModal && (\n          <Modal\n            onToggleModal={toggleModal}\n            largeImageURL={largeImageURL}\n          />\n        )}\n        <ToastContainer autoClose={5000} />\n  </Container>\n  </>\n  )\n}\n\n\n// class App extends Component {\n//   state = {\n//     query: '',\n//     images: [],\n//     largeImageURL: '',\n//     page: 1,\n//     error: null,\n//     isLoading: false,\n//     showModal: false,\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.query !== this.state.query) {\n//       this.setState({ images: [], page: 1, error: null });\n//     }\n//   }\n\n//   searchImages = async () => {\n//     const { query, page } = this.state;\n\n//     if (query.trim() === '') {\n//       return toast.error('No-no! Dont joke with me! Enter something interesting!');\n//     }\n\n//     this.toggleLoader();\n\n//     try {\n//       const request = await apiService(query, page);\n//       this.setState(({ images, page }) => ({\n//         images: [...images, ...request],\n//         page: page + 1,\n//       }));\n//       if (request.length === 0) {\n//         this.setState({ error: `No results were found for ${query}!` });\n//       }\n//     } catch (error) {\n//       this.setState({ error: 'Something went wrong. Try again.' });\n//     } finally {\n//       this.toggleLoader();\n//     }\n//   };\n\n//   handleChange = e => {\n//     this.setState({ query: e.target.value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.searchImages();\n//   };\n\n//   onLoadMore = () => {\n//     this.searchImages();\n//     this.scrollPage();\n//   };\n\n  // onOpenModal = e => {\n  //   this.setState({ largeImageURL: e.target.dataset.source });\n  //   this.toggleModal();\n  // };\n\n  // toggleLoader = () => {\n  //   this.setState(({ isLoading }) => ({\n  //     isLoading: !isLoading,\n  //   }));\n  // };\n\n  // toggleModal = () => {\n  //   this.setState(({ showModal }) => ({\n  //     showModal: !showModal,\n  //   }));\n  // };\n\n  // scrollPage = () => {\n  //   setTimeout(() => {\n  //     window.scrollBy({\n  //       top: document.documentElement.clientHeight - 160,\n  //       behavior: 'smooth',\n  //     });\n  //   }, 1000);\n  // };\n\n//   render() {\n//     const {\n//       query,\n//       images,\n//       largeImageURL,\n//       isLoading,\n//       showModal,\n//       error,\n//     } = this.state;\n//     return (\n//       <Container>\n//         <Searchbar\n//           onHandleSubmit={this.handleSubmit}\n//           onSearchQueryChange={this.handleChange}\n//           value={query}\n//         />\n\n//         {error && <ErrorView texterror={error} />}\n\n//         {images.length > 0 && (\n//           <ImageGallery images={images} onOpenModal={this.onOpenModal} />\n//         )}\n\n//         {isLoading && <Loader />}\n\n//         {!isLoading && images.length > 0 && (\n//           <Button onLoadMore={this.onLoadMore} />\n//         )}\n\n//         {showModal && (\n//           <Modal\n//             onToggleModal={this.toggleModal}\n//             largeImageURL={largeImageURL}\n//           />\n//         )}\n//         <ToastContainer autoClose={3700} />\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}